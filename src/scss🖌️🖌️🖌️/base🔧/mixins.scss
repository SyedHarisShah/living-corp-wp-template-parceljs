
// Short Media querys mixins

@mixin media-min($screenSize) {
	@media only screen and (min-width: $screenSize + px) { @content; }
}

@mixin media-max($screenSize) {
	@media only screen and (max-width: $screenSize + px) { @content; }
}

@mixin media-max-min($screenSize, $screenSize2) {
	@media only screen and (max-width: $screenSize + px) and (min-width: $screenSize2 + px) { @content; }
}

@mixin media-maxH($screenSize) {
	@media only screen and (max-height: $screenSize + px) { @content; }
}
@mixin breakLandscape {
	@media only screen and (max-width: 1180px) and (min-width:  891px) {
		@media (orientation: landscape) {
			@content;
		}
	}
}

@mixin breakDesktop {
	@media only screen and (min-width:  891px) {
		@media (orientation: landscape) {
			@content;
		}
	}
}
@mixin breakPortrait {

	@media only screen and (max-width: 1180px) {
		@media (orientation: portrait) {
			@content;
		}
	}

}

@mixin breakMobile {

	@media only screen and (max-width: 767px) {
			@content;
	}

}

@mixin media-minH($screenSize) {
	@media only screen and (min-height: $screenSize + px) { @content; }
}
@mixin ratio($width,$height) {
	&:after {
    content: '';
    display: inline-block;
    padding-bottom: calc($height * 100% / $width);
    width: 100%;
  }
}
@function pow($x, $n) {
	$ret: 1;
	  
	@if $n >= 0 {
	  @for $i from 1 through $n {
		$ret: $ret * $x;
	  } 
	} @else {
	  @for $i from $n to 0 {
		$ret: $ret / $x;
	  }
	}
	
	@return $ret;
  }

  @function toFixed($float, $digits: 2) {
	$sass-precision: 5;
	
	@if $digits > $sass-precision {
	  @warn "Sass sets default precision to #{$sass-precision} digits, and there is no way to change that for now."
	  + "The returned number will have #{$sass-precision} digits, even if you asked for `#{$digits}`."
	  + "See https://github.com/sass/sass/issues/1122 for further informations.";
	}
	
	$pow: pow(10, $digits);
	@return round($float * $pow) / $pow;
  }
// Paths
@mixin hover{
  @media (hover: hover) {
    @content;
  }
}

@mixin nohover{
	@media (hover: none) {
	  @content;
	}
  }
@mixin clock() {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

@mixin center() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform:translate(-50%,-50%);
}

@mixin center--x() {
	position: absolute;
  	left: 50%;
  	transform:translateX(-50%);
}
@mixin center--y() {
	position: absolute;
  	top: 50%;
  	transform:translateY(-50%);
}

@mixin setpath($color, $stroke: 0) {
	fill: $color;
	stroke: $color;
	stroke-width: $stroke;
}

@mixin background-size {
	background-size:cover;
	background-position:center;
	background-repeat:no-repeat;
}


@function colSize($col) {
	@return calc(($col * 100%) / 12);
}

@function boxes($col) {
	@return ($col * 100) /20+vw;
}

@function rule3($size) {
	@return toFixed((($size * 100) /1440),2)+vw;
}
@function rule3xs($size) {
	@return toFixed((($size * 100) /375),2)+vw;
}
@function rule3min($size,$min) {
	@return round(($min * 1440) /$size);
}
@function rule3height($size) {
	@return toFixed((($size * 100) /1000),2)+vh;
}
@function rule3h($size) {
	@return ($size * 100) /800+vh;
}

@function lH($s,$l) {
	@return calc($l / $s);
}

// @function smaller($size,$smaller) {
  
// 	@return ($smaller * 1440) /$size;
// }

@mixin sizeText($bigger,$biggerline,$font,$line,$smaller,$smallerline){
	@include media-min(($bigger*1440/$font)) {
		font-size:$bigger+px;
		line-height: $biggerline+px;
	}
	font-size:toFixed((($font * 100) /1440),2)+vw;
	line-height: toFixed((($line * 100) /1440),2)+vw;
	@include media-max(round(($smaller * 1440) /$font)) {
		font-size:$smaller+px;
		line-height: $smallerline+px;
	}
}



@mixin vwText($font,$line,$smaller,$smallerline){
	@include media-min(2160) {
		font-size:($font*2160/1440)+px;
		line-height:($line*2160/1440)+px;
	}
	font-size:toFixed((($font * 100) /1440),2)+vw;
	line-height: toFixed((($line * 100) /1440),2)+vw;
	@include media-max(round(($smaller * 1440) /$font)) {
		font-size:$smaller+px;
		line-height: $smallerline+px;
	}
}

@mixin toWidth($width,$biggest){
	@include media-min(($biggest*1440/$width)) {
		width:$biggest+px;
	}
	width:$width;
}



@mixin importFont($fontname, $filename, $weight, $style: normal) {
  @font-face {
    font-family: $fontname; // IE9 Compat Modes
    font-display: swap;
    src: url('http://localhost:1234/public/fonts/#{$filename}.woff') format('woff'), // Safari, Android, iOS
    url('http://localhost:1234/public/fonts/#{$filename}.ttf') format('truetype'); // Legacy iOS
    font-weight: $weight;
    font-style: $style;
  }
}